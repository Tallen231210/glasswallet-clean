'use client';

// Disable static generation for this page
export const dynamic = 'force-dynamic';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { GlassCard } from '@/components/ui/GlassCard';
import { NeonButton } from '@/components/ui/NeonButton';
import { Badge } from '@/components/ui/Badge';
import { StatCard } from '@/components/ui/StatCard';
import { AppShell } from '@/components/layout/AppShell';

export default function PixelsPage() {
  const router = useRouter();
  
  // Mock pixel connection data
  const [connections] = useState([
    {
      id: '1',
      platform: 'Meta (Facebook)',
      status: 'active',
      pixelId: 'fb_pixel_123456789',
      leadsSync: 247,
      lastSync: '2 minutes ago',
      conversionRate: '8.7%'
    },
    {
      id: '2', 
      platform: 'Google Ads',
      status: 'active',
      pixelId: 'gtag_conversion_456789',
      leadsSync: 189,
      lastSync: '5 minutes ago',
      conversionRate: '12.3%'
    },
    {
      id: '3',
      platform: 'TikTok',
      status: 'pending',
      pixelId: 'ttq_pixel_789123',
      leadsSync: 0,
      lastSync: 'Never',
      conversionRate: 'N/A'
    }
  ]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'pending': return 'warning';
      case 'error': return 'default';
      default: return 'default';
    }
  };

  return (
    <AppShell 
      headerTitle="Pixel Integration"
      headerSubtitle="Manage advertising pixel connections and lead synchronization"
      headerActions={
        <div className="flex gap-3">
          <NeonButton variant="secondary" onClick={() => router.push('/pixels/analytics')}>
            View Analytics
          </NeonButton>
          <NeonButton onClick={() => router.push('/pixels/new')}>
            Connect New Pixel
          </NeonButton>
        </div>
      }
    >
      <div className="p-6 space-y-8 max-w-6xl mx-auto">

        {/* Pixel Stats */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <StatCard
            title="Active Connections"
            value={connections.filter(c => c.status === 'active').length}
            description="Live integrations"
            icon="üîó"
            variant="success"
          />
          <StatCard
            title="Leads Synced"
            value={connections.reduce((acc, c) => acc + c.leadsSync, 0)}
            description="This month"
            icon="üìä"
            variant="neon"
            trend="+23% vs last month"
          />
          <StatCard
            title="Avg Conversion"
            value="10.5%"
            description="Across platforms"
            icon="üìà"
            variant="success"
            trend="+2.1% improvement"
          />
          <StatCard
            title="API Health"
            value="99.7%"
            description="Uptime"
            icon="‚úÖ"
            variant="success"
          />
        </div>

        {/* Connected Pixels */}
        <GlassCard className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-white">Connected Pixels</h2>
            <NeonButton size="sm" onClick={() => router.push('/pixels/new')}>
              ‚ûï Add Connection
            </NeonButton>
          </div>

          <div className="space-y-4">
            {connections.map((connection) => (
              <div key={connection.id} className="p-4 rounded-lg bg-white/5 border border-white/10">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-white/10 rounded-lg flex items-center justify-center">
                      <span className="text-xl">
                        {connection.platform.includes('Meta') ? 'üìò' : 
                         connection.platform.includes('Google') ? 'üîç' :
                         connection.platform.includes('TikTok') ? 'üéµ' : 'üìä'}
                      </span>
                    </div>
                    
                    <div>
                      <h3 className="font-semibold text-white">{connection.platform}</h3>
                      <p className="text-gray-400 text-sm font-mono">{connection.pixelId}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-6">
                    <div className="text-center">
                      <p className="text-sm text-gray-400">Status</p>
                      <Badge variant={getStatusColor(connection.status) as any}>
                        {connection.status}
                      </Badge>
                    </div>
                    
                    <div className="text-center">
                      <p className="text-sm text-gray-400">Leads Synced</p>
                      <p className="font-bold text-neon-green">{connection.leadsSync}</p>
                    </div>
                    
                    <div className="text-center">
                      <p className="text-sm text-gray-400">Conversion Rate</p>
                      <p className="font-bold text-white">{connection.conversionRate}</p>
                    </div>
                    
                    <div className="text-center">
                      <p className="text-sm text-gray-400">Last Sync</p>
                      <p className="text-xs text-gray-500">{connection.lastSync}</p>
                    </div>

                    <div className="flex gap-2">
                      <NeonButton variant="secondary" size="sm">
                        ‚öôÔ∏è Configure
                      </NeonButton>
                      <NeonButton variant="secondary" size="sm">
                        üìä Analytics
                      </NeonButton>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>

        {/* Integration Guide */}
        <GlassCard className="p-6">
          <h3 className="text-lg font-semibold text-white mb-4">üöÄ Quick Setup Guide</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-4 bg-white/5 rounded-lg">
              <div className="w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-blue-400 text-xl">1Ô∏è‚É£</span>
              </div>
              <h4 className="font-semibold text-white mb-2">Connect Platform</h4>
              <p className="text-gray-400 text-sm">
                Add your pixel IDs from Meta, Google, or TikTok
              </p>
            </div>

            <div className="text-center p-4 bg-white/5 rounded-lg">
              <div className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-green-400 text-xl">2Ô∏è‚É£</span>
              </div>
              <h4 className="font-semibold text-white mb-2">Configure Rules</h4>
              <p className="text-gray-400 text-sm">
                Set up automatic lead sync based on qualification status
              </p>
            </div>

            <div className="text-center p-4 bg-white/5 rounded-lg">
              <div className="w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
                <span className="text-purple-400 text-xl">3Ô∏è‚É£</span>
              </div>
              <h4 className="font-semibold text-white mb-2">Monitor Results</h4>
              <p className="text-gray-400 text-sm">
                Track conversion improvements and ROI analytics
              </p>
            </div>
          </div>
        </GlassCard>

      </div>
    </AppShell>
  );
}